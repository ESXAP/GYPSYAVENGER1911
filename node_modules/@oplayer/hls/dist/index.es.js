/**
 * name: @oplayer/hls
 * version: v1.2.23
 * description: Hls plugin for oplayer
 * author: shiyiya
 * homepage: https://github.com/shiyiya/oplayer
 */
const PLUGIN_NAME = "oplayer-plugin-hls";
const defaultMatcher = (video, source, forceHLS) => {
  return source.format === "hls" || source.format === "m3u8" || (source.format === "auto" || typeof source.format === "undefined") && /m3u8(#|\?|$)/i.test(source.src) && (forceHLS || !(Boolean(video.canPlayType("application/x-mpegURL")) || Boolean(video.canPlayType("application/vnd.apple.mpegURL"))));
};
class HlsPlugin {
  constructor(options) {
    this.key = "hls";
    this.name = PLUGIN_NAME;
    this.version = "1.2.23";
    this.options = {
      config: {},
      forceHLS: false,
      textControl: true,
      audioControl: true,
      qualityControl: true,
      withBitrate: false,
      qualitySwitch: "immediate",
      matcher: defaultMatcher
    };
    Object.assign(this.options, options);
  }
  apply(player) {
    this.player = player;
  }
  async load(_ref, source) {
    var _a;
    var _HlsPlugin$library;
    let $video = _ref.$video;
    const _this$options = this.options, matcher = _this$options.matcher, forceHLS = _this$options.forceHLS;
    if (!matcher($video, source, forceHLS))
      return false;
    (_HlsPlugin$library = HlsPlugin.library) !== null && _HlsPlugin$library !== void 0 ? _HlsPlugin$library : HlsPlugin.library = (await import("hls.js/dist/hls.min.js")).default;
    if (!HlsPlugin.library.isSupported())
      return false;
    const _this$options2 = this.options, config = _this$options2.config, active = _this$options2.active;
    this.instance = new HlsPlugin.library(config);
    const instance = this.instance, player = this.player;
    if (active) {
      active(instance, HlsPlugin.library);
    }
    instance.loadSource(source.src);
    instance.attachMedia($video);
    instance.on(HlsPlugin.library.Events.ERROR, function(_, data) {
      const type = data.type, details = data.details, fatal = data.fatal;
      if (fatal) {
        player.hasError = true;
        player.emit("error", Object.assign({}, data, {
          pluginName: PLUGIN_NAME,
          message: type + ": " + details
        }));
      }
    });
    if ((_a = player.context.ui) == null ? void 0 : _a.setting) {
      generateSetting(player, instance, this.options);
    }
    return this;
  }
  unload() {
    var _a;
    (_a = this.instance) == null ? void 0 : _a.stopLoad();
  }
  destroy() {
    var _a;
    if (this.instance) {
      const player = this.player, instance = this.instance, inactive = this.options.inactive;
      if (inactive)
        inactive(instance, HlsPlugin.library);
      if ((_a = player.context.ui) == null ? void 0 : _a.setting)
        removeSetting(player);
      instance.destroy();
    }
  }
}
HlsPlugin.library = globalThis.Hls;
function create(options) {
  return new HlsPlugin(options);
}
const generateSetting = function(player, instance) {
  let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const ui = player.context.ui;
  if (options.qualityControl) {
    instance.once(HlsPlugin.library.Events.MANIFEST_PARSED, () => {
      settingUpdater({
        icon: ui.icons.quality,
        name: "Quality",
        settings() {
          if (instance.levels.length > 1) {
            return instance.levels.reduce((pre, level, i) => {
              let name = (level.name || level.height).toString();
              if (isFinite(+name))
                name += "p";
              if (options.withBitrate) {
                const kb = level.bitrate / 1e3;
                const useMb = kb > 1e3;
                const number = useMb ? (kb / 1e3).toFixed(2) : Math.floor(kb);
                name += " (" + number + (useMb ? "m" : "k") + "bps)";
              }
              pre.push({
                name,
                default: instance.currentLevel == i,
                value: i
              });
              return pre;
            }, [{
              name: player.locales.get("Auto"),
              default: instance.autoLevelEnabled,
              value: -1
            }]);
          }
          return [];
        },
        onChange(it) {
          if (options.qualitySwitch == "immediate") {
            instance.currentLevel = it.value;
            if (it.value !== -1)
              instance.loadLevel = it.value;
          } else {
            instance.nextLevel = it.value;
            if (it.value !== -1)
              instance.nextLoadLevel = it.value;
          }
        }
      });
    });
    instance.on(HlsPlugin.library.Events.LEVEL_SWITCHED, function menuUpdater(_, _ref2) {
      let level = _ref2.level;
      if (instance.autoLevelEnabled) {
        const height = instance.levels[level].height;
        const levelName = player.locales.get("Auto") + (height ? " (" + height + "p)" : "");
        ui.setting.updateLabel(PLUGIN_NAME + "-Quality", levelName);
      } else {
        ui.setting.select(PLUGIN_NAME + "-Quality", level + 1, false);
      }
    });
  }
  if (options.audioControl)
    instance.on(HlsPlugin.library.Events.AUDIO_TRACK_LOADED, () => {
      settingUpdater({
        icon: ui.icons.lang,
        name: "Language",
        settings() {
          if (instance.audioTracks.length > 1) {
            return instance.audioTracks.map((_ref3) => {
              let name = _ref3.name, lang = _ref3.lang, id = _ref3.id;
              return {
                name: lang || name,
                default: instance.audioTrack == id,
                value: id
              };
            });
          }
          return [];
        },
        onChange(it) {
          instance.audioTrack = it.value;
        }
      });
    });
  if (options.textControl)
    instance.on(HlsPlugin.library.Events.SUBTITLE_TRACK_LOADED, () => {
      settingUpdater({
        icon: ui.icons.subtitle,
        name: "Subtitle",
        settings() {
          if (instance.subtitleTracks.length > 1) {
            return instance.subtitleTracks.reduce((pre, _ref4) => {
              let name = _ref4.name, lang = _ref4.lang, id = _ref4.id;
              pre.push({
                name: lang || name,
                default: instance.subtitleTrack == id,
                value: id
              });
              return pre;
            }, [{
              name: player.locales.get("Off"),
              default: !instance.subtitleDisplay,
              value: -1
            }]);
          }
          return [];
        },
        onChange(_ref5) {
          let value = _ref5.value;
          if (instance.subtitleDisplay = !(value == -1)) {
            instance.subtitleTrack = value;
          }
        }
      });
    });
  function settingUpdater(arg) {
    const settings = arg.settings();
    if (settings && settings.length < 2)
      return;
    const name = arg.name, icon = arg.icon, onChange = arg.onChange;
    player.context.ui.setting.unregister(PLUGIN_NAME + "-" + name);
    player.context.ui.setting.register({
      name: player.locales.get(name),
      icon,
      onChange,
      type: "selector",
      key: PLUGIN_NAME + "-" + name,
      children: settings
    });
  }
};
const removeSetting = (player) => {
  ["Quality", "Language", "Subtitle"].forEach((it) => player.context.ui.setting.unregister(PLUGIN_NAME + "-" + it));
};
export {
  create as default
};
