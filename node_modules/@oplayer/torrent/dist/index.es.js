/**
 * name: @oplayer/torrent
 * version: v1.2.23
 * description: Torrent plugin for oplayer.
 * author: shiyiya
 * homepage: https://github.com/shiyiya/oplayer
 */
import webtorrent from "webtorrent/dist/webtorrent.min.js";
const _TorrentPlugin = class {
  constructor(options) {
    this.options = options;
    this.key = "torrent";
    this.name = "oplayer-plugin-torrent";
    this.version = "1.2.23";
  }
  apply(player) {
    this.player = player;
  }
  async load(_ref, source) {
    let $video = _ref.$video;
    const _this$options = this.options, _this$options$config = _this$options.config, config = _this$options$config === void 0 ? {} : _this$options$config, _this$options$matcher = _this$options.matcher, matcher = _this$options$matcher === void 0 ? _TorrentPlugin.defaultMatcher : _this$options$matcher;
    if (!matcher(source))
      return false;
    if (!webtorrent.WEBRTC_SUPPORT)
      return false;
    this.prePreload ?? (this.prePreload = $video.preload);
    this.instance = new webtorrent(config);
    $video.preload = "metadata";
    this.instance.add(source.src, (torrent) => {
      const file = torrent.files.find((file2) => file2.name.endsWith(".mp4"));
      file.renderTo($video, {
        autoplay: $video.autoplay,
        controls: false
      });
    });
    return this;
  }
  async unload() {
    if (this.instance)
      await this.instance.destroy();
    if (this.prePreload)
      this.player.$video.preload = this.prePreload;
    this.prePreload = void 0;
  }
  async destroy() {
    await this.unload();
  }
};
let TorrentPlugin = _TorrentPlugin;
TorrentPlugin.defaultMatcher = (source) => /magnet:?[^\"]+/.test(source.src) || /.*\.torrent/.test(source.src);
function create() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return new TorrentPlugin(options);
}
export {
  create as default
};
