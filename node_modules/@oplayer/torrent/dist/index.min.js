/**
 * name: @oplayer/torrent
 * version: v1.2.23
 * description: Torrent plugin for oplayer.
 * author: shiyiya
 * homepage: https://github.com/shiyiya/oplayer
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("webtorrent/dist/webtorrent.min.js")):"function"==typeof define&&define.amd?define(["webtorrent/dist/webtorrent.min.js"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).OTorrent=t(e.WebTorrent)}(this,(function(e){"use strict";const t=class{constructor(e){this.options=e,this.key="torrent",this.name="oplayer-plugin-torrent",this.version="1.2.23"}apply(e){this.player=e}async load(n,o){let r=n.$video;const i=this.options,s=i.config,a=void 0===s?{}:s,d=i.matcher;return!!(void 0===d?t.defaultMatcher:d)(o)&&(!!e.WEBRTC_SUPPORT&&(this.prePreload??(this.prePreload=r.preload),this.instance=new e(a),r.preload="metadata",this.instance.add(o.src,(e=>{e.files.find((e=>e.name.endsWith(".mp4"))).renderTo(r,{autoplay:r.autoplay,controls:!1})})),this))}async unload(){this.instance&&await this.instance.destroy(),this.prePreload&&(this.player.$video.preload=this.prePreload),this.prePreload=void 0}async destroy(){await this.unload()}};let n=t;return n.defaultMatcher=e=>/magnet:?[^\"]+/.test(e.src)||/.*\.torrent/.test(e.src),function(){return new n(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})}}));
