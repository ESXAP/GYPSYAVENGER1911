/**
 * name: @oplayer/react
 * version: v1.2.8
 * description: React wrapper for oplayer.
 * author: shiyiya
 * homepage: https://github.com/shiyiya/oplayer
 */
const _excluded = ["playing", "duration", "aspectRatio", "plugins", "onEvent"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
import { jsx } from "react/jsx-runtime";
import Player__default from "@oplayer/core";
export * from "@oplayer/core";
import { forwardRef, useRef, useCallback, useEffect, useImperativeHandle, useMemo } from "react";
const ReactOPlayer = forwardRef((props, ref) => {
  const playing = props.playing, duration = props.duration, _props$aspectRatio = props.aspectRatio, aspectRatio = _props$aspectRatio === void 0 ? 9 / 16 : _props$aspectRatio, _props$plugins = props.plugins, plugins = _props$plugins === void 0 ? [] : _props$plugins, onEvent = props.onEvent, rest = _objectWithoutPropertiesLoose(props, _excluded);
  const isInitialMount = useRef(true);
  const onEventRef = useRef(onEvent);
  onEventRef.current = onEvent;
  const player = useRef(null);
  const preSource = usePrevious(rest.source);
  const isNotReady = isInitialMount.current || !player.current || /* destroy */
  !player.current.$root;
  const onRefChange = useCallback((node) => {
    if (node !== null && (!player.current || !player.current.$root)) {
      player.current = Player__default.make(node, rest).use(plugins).create();
      if (typeof duration == "number")
        player.current.seek(duration / 1e3);
      if (onEvent) {
        player.current.on((payload) => {
          var _a;
          return (_a = onEventRef.current) == null ? void 0 : _a.call(onEventRef, payload);
        });
      }
    }
  }, []);
  useEffectWhere(!isNotReady, () => {
    if (playing) {
      if (!player.current.isPlaying)
        player.current.play();
    } else {
      if (player.current.isPlaying)
        player.current.pause();
    }
  }, [playing]);
  useEffectWhere(!isNotReady, () => {
    var _a;
    if (rest.source instanceof Promise && preSource != rest.source || ((_a = rest.source) == null ? void 0 : _a.src) && (preSource == null ? void 0 : preSource.src) !== rest.source.src) {
      player.current.changeSource(rest.source);
    }
  }, [rest.source]);
  useEffectWhere(!isNotReady, () => {
    if (isNotReady || typeof duration != "number")
      return;
    player.current.seek(duration / 1e3);
  }, [duration]);
  useEffectWhere(!isNotReady, () => {
    if (rest.muted) {
      player.current.mute();
    } else {
      player.current.unmute();
    }
  }, [rest.muted]);
  useEffectWhere(!isNotReady, () => {
    player.current.setPlaybackRate(rest.playbackRate);
  }, [rest.playbackRate]);
  useEffect(() => {
    isInitialMount.current = false;
    return () => {
      var _a;
      return (_a = player.current) == null ? void 0 : _a.destroy();
    };
  }, []);
  useImperativeHandle(ref, () => player.current, []);
  return useMemo(() => {
    if (aspectRatio == 0) {
      return /* @__PURE__ */ jsx("div", {
        style: {
          height: "100%",
          width: "100%"
        },
        ref: onRefChange
      });
    }
    return /* @__PURE__ */ jsx("div", {
      style: {
        width: "100%",
        paddingTop: aspectRatio * 100 + "%",
        backgroundColor: "#f4f4f4",
        position: "relative"
      },
      children: /* @__PURE__ */ jsx("div", {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%"
        },
        ref: onRefChange
      })
    });
  }, []);
});
const useEffectWhere = (where, cb, deps) => {
  useEffect(() => {
    if (where) {
      return cb();
    }
  }, deps);
};
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
export {
  ReactOPlayer as default,
  usePrevious
};
